#!/usr/bin/python3

import argparse
import os
import subprocess
import getpass

if os.name == "posix": # Assume linux/MacOs variants
    import grp # pylint: disable=import-error

IMAGE_NAME = "cacophony-api"
CONTAINER_NAME = "cacophony-api"

parser = argparse.ArgumentParser(
    description="Run cacophony API server inside a Docker container"
)
parser.add_argument(
    "--isolate",
    default=False,
    action="store_true",
    help="Re-install npm dependencies, don't restart server when code changes",
)
parser.add_argument(
    "--background",
    default=False,
    action="store_true",
    help="Run container in background & don't show container logs",
)
# Set to false if your current user is already in the docker user group
parser.add_argument(
    "--sudo",
    default=False,
    action="store_true",
    help="Run commands with sudo",
)
args = parser.parse_args()

use_sudo = args.sudo
if not args.sudo:
    current_user = getpass.getuser()
    user_in_docker_group = current_user in grp.getgrnam("docker").gr_mem
    if user_in_docker_group:
        print("{} is in docker group".format(current_user))
    #Run docker ps without sudo to check if it can be used without
    if not user_in_docker_group:
        return_code = subprocess.call(
            ["docker", "ps"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            timeout=30
        )
        print("docker ps returned: {}".format(return_code))
        if return_code != 0:
            use_sudo = True

print("Running commands with sudo {}".format(use_sudo))

def add_sudo(cmd_list):
    if use_sudo:
        cmd_list.insert(0, "sudo")
    return cmd_list

if not os.path.exists("node_modules"):
    print("Node modules have not been installed yet, doing so now")
    subprocess.call(["npm", "install"])

print("Stopping {} container (if running)".format(CONTAINER_NAME))
remove_container_cmd = ["docker", "rm", "--force", CONTAINER_NAME]
subprocess.call(
    add_sudo(remove_container_cmd),
    stdout=subprocess.DEVNULL,
    stderr=subprocess.STDOUT,
)

print("Building container")
build_container_cmd = ["docker", "build", ".", "-t", IMAGE_NAME]
subprocess.check_call(add_sudo(build_container_cmd))

print("Starting container")
run_cmd = [
    "docker",
    "run",
    "-td",
    "--rm",
    "--name",
    CONTAINER_NAME,
    "-p",
    "1080:1080",
    "-p",
    "2008:2008",
    "-p",
    "9001:9001",
    "-p",
    "5400:5432",
    "--volume",
    os.getcwd() + ":/app",
]

if args.isolate:
    run_cmd.extend(
        [
            "-e",
            "ISOLATE=1",  # copy code to a separate location & run "npm install"
            "--volume",
            "/app/node_modules",  # don't pass node_modules directory through
            "-e",
            "NODE_BIN=node",  # use node to run the server
        ]
    )
else:
    run_cmd.extend(
        [
            "-e",
            "NODE_BIN=nodemon",  # use nodemon to restart the server when the code changes
        ]
    )
run_cmd.append(IMAGE_NAME)
subprocess.check_call(add_sudo(run_cmd))

if not args.background:
    print("\nShowing container logs")
    try:
        docker_logs_cmd = ["docker", "logs", "--follow", CONTAINER_NAME]
        subprocess.call(add_sudo(docker_logs_cmd))
    except (KeyboardInterrupt, PermissionError):
        pass
